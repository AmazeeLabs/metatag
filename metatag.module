<?php

/**
 * DO NOT USE THIS MODULE ON ANYTHING RESEMBLING A PRODUCTION SITE. IT IS NOT
 * FINISHED, THE APIS ARE NOT YET LOCKED, AND THIS DOESN'T ACTUALLY WORK YET.
 */

/**
 * Implements hook_hook_info().
 */
function metatag_hook_info() {
  $hooks = array(
    'metatag_info',
    'metatag_info_alter',
    'metatag_context_info',
    'metatag_context_info_alter',
    'metatag_config_load',
    'metatag_config_presave',
    'metatag_config_insert',
    'metatag_config_update',
    'metatag_config_delete',
    'metatag_data_load',
    'metatag_data_insert',
    'metatag_data_update',
    'metatag_data_delete',
    'metatag_data_alter',
  );

  return array_fill_keys($hooks, array('group' => 'metatags'));
}

/**
 * Implements hook_permisson().
 */
function metatag_permission() {
  $permissions['administer meta tags'] = array(
    'title' => t('Administer meta tags.'),
    'restrict access' => TRUE,
  );
  $permissions['edit meta tags'] = array(
    'title' => t('Edit meta tags.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function metatag_menu() {
  $items['admin/config/search/meta-tags'] = array(
    'title' => 'Meta tags',
    'page callback' => 'metatag_summary_page',
    'access arguments' => array('administer meta tags'),
    'file' => 'meta_tags.admin.inc',
  );
  //$items['admin/config/search/meta-tags/add'] = array(
  //  'title' => 'Add meta tag',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('metatag_edit_form'),
  //  'access arguments' => array('administer meta tags'),
  //  'file' => 'meta_tags.admin.inc',
  //  'type' => MENU_LOCAL_ACTION,
  //);
  return $items;
}

/**
 * Given an entity and bundle, return all the enabled meta tags, default values
 * and data.
 */
function metatag_load_metatag_entity_default($entity_type, $bundle) {
  $defaults = &drupal_static(__FUNCTION__, array());

  // Check to see if
  if (!isset($defaults[$entity])) {
    if ($cache = cache_get("metatag:config:{$entity_type}")) {
      $defaults[$entity] = $cache->data;
    }
  }

  if (!isset($defaults[$entity][$bundle])) {
    $config = db_query("SELECT name, value, data FROM {metatag_config} WHERE entity IN ('', :entity) AND bundle IN ('', :bundle) ORDER BY entity, bundle", array(':entity' => $entity, ':bundle' => $bundle))->fetchAllKeyed();
    $defaults[$entity][$bundle] = $config;
    cache_set("metatag:config:{$entity_type}", $defaults[$entity]);
  }

  return $defaults[$entity][$bundle];
}

function metatag_config_load($type, $subtype) {

}

function metatag_config_save($type, $subtype, $config) {


  // Clear any caches.
  metatag_metatag_config_cache_clear($type, $subtype);
  metatag_metatags_cache_clear($type);
}

function metatag_config_delete($type, $subtype) {
  db_delete('metatag_config')
    ->condition('entity_type', $type)
    ->condition('bundle', $subtype)
    ->execute();

  // Clear any caches.
  metatag_metatag_config_cache_clear($type, $subtype);
  metatag_metatags_cache_clear($type);
}

function metatag_metatag_config_cache_clear($type, $subtype) {

}

function metatag_metatags_load($type, $id) {
  $metatags = metatag_metatags_load_multiple($type, array($id));
  return !empty($metatags) ? reset($metatags) : array();
}

function metatag_metatags_load_multiple($type, array $ids) {
  if (empty($ids)) {
    return array();
  }
}

function metatag_metatags_save($type, $id, $metatags) {


  // Clear cached data.
  //metatag_metatags_cache_clear($type, $id);
}

function metatag_metatags_delete($type, $id) {
  return metatag_metatags_delete_multiple($type, array($id));
}

function metatag_metatags_delete_multiple($type, array $ids) {
  $transaction = db_transaction();

  if ($metatags = metatag_metatags_load_multiple($type, $ids)) {
    try {
      // Let other modules know about the metatags being deleted.
      module_invoke_all('metatag_metatags_delete', $type, $ids);

      db_delete('metatag_data')
        ->condition('entity_type', $type)
        ->condition('entity_id', $ids, 'IN')
        ->execute();

      // Clear cached data.
      metatag_metatag_data_cache_clear($type, $ids);
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('metatag', $e);
      throw $e;
    }

  }
}

function metatag_metatags_cache_clear($type, $id = NULL) {
  if (empty($id)) {
    cache_clear_all("$type", 'cache_metatag', TRUE);
  }
  else {
    $ids = (array) $id;
    foreach ($ids as $id) {
      cache_clear_all("$type:$id", 'cache_metatag', TRUE);
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function metatag_entity_load($entities, $type) {
  $metatags = metatag_metatags_load_multiple($type, array_keys($entities));
  foreach ($entities as $id => $entity) {
    $entities[$id]->metatags = isset($metatags[$id]) ? $metatags[$id] : array();
  }
}

/**
 * Implements hook_entity_insert().
 */
function metatag_entity_insert($entity, $type) {
  if (isset($entity->metatags)) {
    list($id) = entity_extract_ids($type, $entity);
    metatag_metatags_save($type, $id, $entity->metatags);
  }
}

/**
 * Implements hook_entity_update().
 */
function metatag_entity_update($entity, $type) {
  if (isset($entity->metatags)) {
    list($id) = entity_extract_ids($type, $entity);
    metatag_metatags_save($type, $id, $entity->metatags);
  }
}

/**
 * Implements hook_entity_delete().
 */
function metatag_entity_delete($entity, $type) {
  list($id) = entity_extract_ids($type, $entity);
  metatag_metatags_delete($type, $id);
}

/**
 * Implements hook_field_attach_delete_revision().
 */
function metatag_field_attach_delete_revision($entity_type, $entity) {
  list($entity_id, $revision_id) = entity_extract_ids($entity_type, $entity);

}

/**
 * Implements hook_field_attach_view_alter().
 */
function metatag_field_attach_view_alter(&$output, $context) {
  $entity_type = $context['entity_type'];

  if (metatag_entity_supports_metatags($entity_type) && $context['view_mode'] == 'full' && _metatag_entity_is_page($entity_type, $context['entity'])) {
    // Build options for meta tag rendering.

    $options = $context;
    $options['token data'][token_get_entity_mapping('entity', $entity_type)] = $context['entity'];

    $metatags = array(
      'description' => '[node:title][term:name]',
      'generator' => 'Dave (http://www.davereid.net/)',
      'canonical' => '[current-page:url]',
      'shortlink' => '[current-page:url:path]',
      'title' => '[current-page:title] | [site:name]',
    );
    foreach ($metatags as $metatag => $value) {
      $tag = metatag_get_instance($metatag, array('value' => $value));
      $entity->content['metatags'][$metatag] = $tag->getElement($options);
    }
  }

  $entity = $context['entity'];
}

function metatag_entity_supports_metatags($entity_type) {
  $results = &drupal_static(__FUNCTION__);

  if (!isset($results)) {
    $results = array();
    $info = entity_get_info();
    foreach (array_keys($info) as $type) {
      $results[$type] = !empty($info[$type]['metatags']);
    }
  }

  return isset($results[$entity_type]) ? $results[$entity_type] : FALSE;
}

/**
 * Implements hook_entity_info_alter().
 */
function metatag_entity_info_alter(&$info) {
  $defaults['node'] = array(
    'metatags' => TRUE,
    'path' => 'node/%node',
  );
  $defaults['taxonomy_term'] = array(
    'metatags' => TRUE,
    'path' => 'taxonomy/term/%taxonomy_term',
  );
  if (module_exists('forum') && ($vid = variable_get('forum_nav_vocabulary', 0)) && $vocabulary = taxonomy_vocabulary_load($vid)) {
    $defaults['taxonomy_term']['bundles'][$vocabulary->machine_name]['path'] = 'forum/%taxonomy_term';
  }
  $defaults['user'] = array(
    'metatags' => TRUE,
    'path' => 'user/%user',
  );
  $defaults['comment'] = array(
    'metatags' => FALSE,
  );
  $defaults['file'] = array(
    'metatags' => FALSE,
  );

  foreach ($defaults as $key => $entity_defaults) {
    if (isset($info[$key])) {
      $info[$key] = drupal_array_merge_deep($entity_defaults, $info[$key]);
    }
  }
}

/**
 * Given a path determine if it is an entity default path.
 *
 * @param $path
 *   The internal path. The id of the entity should be in the string as '[id]'.
 * @return
 *   An array with the entity type and the loaded entity object.
 */
function metatag_load_entity_from_path($path) {
  $entity_paths = &drupal_static(__FUNCTION__);
  $result = FALSE;

  if (!isset($entity_paths)) {
    $entity_paths = array();
    foreach (entity_get_info() as $entity_type => $entity_info) {
      if (isset($entity_info['default path'])) {
        $default_path = $entity_info['default path'];
        $default_path = preg_quote($default_path, '/');
        $default_path = str_replace('\[id\]', '(\d+)', $default_path);
        $entity_paths[$entity_type] = $default_path;
      }
    }
  }

  foreach ($entity_paths as $entity_type => $default_path) {
    if (preg_match("/^{$default_path}$/", $path, $matches)) {
      if ($entity = entity_load($entity_type, array($matches[1]))) {
        $result = array('entity_type' => $entity_type, 'entity' => reset($entity));
      }
      break;
    }
  }

  drupal_alter('metatag_load_entity_from_path', $path, $result);
  return $result;
}

function metatag_page_alter(&$page) {

}

/**
 * Returns whether the current page is the page of the passed in entity.
 *
 * @param $type
 *    The entity type; e.g. 'node' or 'user'.
 * @param $entity
 *    The entity object.
 *
 * @return
 *   TRUE if the current page is the page of the specified entity, or FALSE
 *   otherwise.
 */
function _metatag_entity_is_page($type, $entity) {
  $uri = entity_uri($type, $entity);
  return (!empty($uri) && current_path() == $uri['path']);
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function metatag_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  db_update('metatag_config')
    ->fields(array('bundle' => $bundle_new))
    ->condition('entity', $entity_type)
    ->condition('bundle', $bundle_old)
    ->execute();

  metatag_metatag_config_cache_clear($entity_type);
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function metatag_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  metatag_metatag_config_delete($entity_type, $bundle);
}

/**
 * Implements hook_field_attach_form().
 */
function metatag_field_attach_form($type, $entity, &$form, &$form_state, $langcode) {
  list($id, , $subtype) = entity_extract_ids($type, $entity);
  //$form['metatags'] = array(
  //  '#type' => 'fieldset',
  //  '#title' => t('Meta tags'),
  //  '#group' => 'additional_settings',
  //  '#collapsible' => TRUE,
  //  '#collapsed' => TRUE,
  //);
  //module_invoke_all('metatag_attach_form', $form['metatags']);
  //dpm($entity);
  //debug($id);
  //debug($subtype);
}

/**
 * Get the meta tag information array of a meta tag.
 *
 * @param $metatag
 *   The meta tag name, e.g. description, for which the info shall be returned,
 *   or NULL to return an array with info about all meta tags.
 */
function metatag_get_info($metatag = NULL) {
  global $language;

  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['metatag_info'] = &drupal_static(__FUNCTION__);
  }
  $metatag_info = &$drupal_static_fast['metatag_info'];

  // hook_metatag_info() includes translated strings, so each language is cached
  // separately.
  $cid = 'metatag:info:metatags:' . $language->language;

  if (empty($metatag_info)) {
    if ($cache = cache_get($cid)) {
      $metatag_info = $cache->data;
    }
    else {
      $metatag_info = module_invoke_all('metatag_info');
      // Merge in default values.
      foreach ($metatag_info as $name => $data) {
        $metatag_info[$name] += array(
          // Merge in default values.
          'name' => $name,
          'class' => 'DrupalTextMetaTag',
        );
      }
      // Let other modules alter the entity info.
      drupal_alter('metatag_info', $metatag_info);
      cache_set($cid, $metatag_info);
    }
  }

  if (empty($metatag)) {
    return $metatag_info;
  }
  elseif (isset($metatag_info[$metatag])) {
    return $metatag_info[$metatag];
  }
}

function metatag_get_instance($metatag, array $data = array()) {
  if (!is_string($metatag)) {
    debug_print_backtrace();
  }
  $info = metatag_get_info($metatag);
  return new $info['class']($info, $data);
}

/**
 * Set a variable to be altered in metatag_preprocess_html().
 *
 * @see metatag_get_preprocess_variables()
 * @see metatag_preprocess_html()
 * @see metatag_preprocess_maintenance_page()
 */
function metatag_set_preprocess_variable($hook, $variable, $value) {
  $variables = &drupal_static(__FUNCTION__, array());
  $variables[$hook][$variable] = $value;
}

/**
 * Return an array of variables to be altered in preprocess functions.
 *
 * @see metatag_set_preprocess_variable()
 * @see metatag_preprocess_html()
 * @see metatag_preprocess_maintenance_page()
 */
function metatag_get_preprocess_variables($hook) {
  $variables = drupal_static('metatag_set_preprocess_variable', array());
  return isset($variables[$hook]) ? $variables[$hook] : array();
}

/**
 * Implements hook_preprocess_html().
 */
function metatag_preprocess_html(&$variables) {
  foreach (metatag_get_preprocess_variables('html') as $variable => $value) {
    $variables[$variable] = $value;
  }
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function metatag_preprocess_maintenance_page(&$variables) {
  foreach (metatag_get_preprocess_variables('html') as $variable => $value) {
    $variables[$variable] = $value;
  }
}

/**
 * Implements hook_html_head_alter().
 */
function metatag_html_head_alter(&$elements) {
  // Remove duplicate link tags if found.
  $metatags = metatag_get_info();
  foreach (array_keys($metatags) as $name) {
    if (!isset($elements['metatag_' . $name]) || $elements['metatag_' . $name]['#tag'] != 'link') {
      // Only check for link tags added by the metatags module.
      continue;
    }
    foreach (array_keys($elements) as $key) {
      if (strpos($key, 'drupal_add_html_head_link:' . $name . ':') === 0) {
        unset($elements[$key]);
        break;
      }
    }
  }
}

function metatag_metatag_get_form($metatag, array $data = array(), array $options = array()) {
  $instance = metatag_get_instance($metatag, $data);
  return $instance->getForm($options);
}

function metatag_get_context_info($type = NULL, $bundle = NULL) {
  global $language;

  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['metatag_context_info'] = &drupal_static(__FUNCTION__);
  }
  $context_info = &$drupal_static_fast['metatag_context_info'];

  // hook_metatag_info() includes translated strings, so each language is cached
  // separately.
  $cid = 'metatag:info:context:' . $language->language;

  if (empty($context_info)) {
    if ($cache = cache_get($cid)) {
      $context_info = $cache->data;
    }
    else {
      $context_info = module_invoke_all('metatag_context_info');
      foreach (entity_get_info() as $entity_type => $entity_info) {
        if (isset($entity_info['metatags']) && empty($entity_info['metatags'])) {
          continue;
        }
        $context_info[$entity_type] = $entity_info;
      }

      foreach (array_keys($context_info) as $context_key) {
        $context_info[$context_key]['bundles']['all'] = array(
          'label' => t('All'),
        );
      }

      // Let other modules alter the context info.
      drupal_alter('metatag_context_info', $context_info);
      cache_set($cid, $context_info);
    }
  }

  if (isset($type) && isset($bundle)) {
    return isset($context_info[$type]['bundles'][$bundle]) ? $context_info[$type]['bundles'][$bundle] : NULL;
  }
  elseif (isset($type)) {
    return isset($context_info[$type]) ? $context_info[$type] : NULL;
  }
  else {
    return $context_info;
  }
}
