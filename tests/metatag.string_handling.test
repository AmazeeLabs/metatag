<?php
/**
 * @file
 * Contains the tests for Metatag's string handling.
 */

/**
 * Tests the Metatag string handling.
 */
class MetatagStringHandlingTest extends MetatagTestHelper {

  /**
   * @var $admin_user
   *   An admin user.
   */
  protected $admin_user;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Metatag string tests',
      'description' => "Tests Metatag's string handling.",
      'group' => 'Metatag',
    );
  }

  /**
   * {@inheritdoc}
   */
  function setUp(array $modules = array()) {
    parent::setUp($modules);

    $content_type = 'page';

    // Create an admin user and log them in.
    $perms = array(
      // Needed for the content type.
      'create ' . $content_type . ' content',
      'delete any ' . $content_type . ' content',
      'edit any ' . $content_type . ' content',

      // This permission is required in order to create new revisions.
      'administer nodes',
    );
    $this->adminUser = $this->createAdminUser($perms);
    $this->drupalLogin($this->adminUser);
  }

  /**
   * Tests that a metatag with single quote is not double escaped.
   */
  function testSingleQuote() {
    $string_original = "bla'bleblu";
    $string_encoded = htmlentities($string_original, ENT_QUOTES);
    $edit = array(
      'metatags[und][description][value]' => $string_original,
    );
    $this->drupalPost('admin/config/search/metatags/config/node', $edit, 'Save');

    $result = db_select('metatag_config', 'mc')
      ->fields('mc', array('config'))
      ->condition('mc.instance', 'node')
      ->execute()
      ->fetchAssoc();

    $config = unserialize($result['config']);
    $this->assertNotEqual($string_encoded, $config['description']['value'], 'The description was escaped properly on the database.');
    $this->assertEqual($string_original, $config['description']['value'], 'The description was escaped properly on the database.');

    // Create a node and check how the meta tag is displayed.
    $node = $this->drupalCreateNode();
    $this->drupalGet('node/' . $node->nid);

    // The raw output should include
    $this->assertRaw($string_encoded, 'Confirmed the node has the correctly encoded meta tag string.');
    $this->assertNoRaw($string_original, 'Confirmed the node does not have an incorrectly encoded meta tag string.');
  }

  /**
   * Tests that a metatag with single quote is not double escaped.
   */
  function testDoubleQuote() {
    $string_original = 'bla"bleblu';
    $string_encoded = htmlentities($string_original, ENT_QUOTES);
    $edit = array(
      'metatags[und][description][value]' => $string_original,
    );
    $this->drupalPost('admin/config/search/metatags/config/node', $edit, 'Save');

    $result = db_select('metatag_config', 'mc')
      ->fields('mc', array('config'))
      ->condition('mc.instance', 'node')
      ->execute()
      ->fetchAssoc();

    $config = unserialize($result['config']);
    $this->assertNotEqual($string_encoded, $config['description']['value'], 'The description was escaped properly on the database.');
    $this->assertEqual($string_original, $config['description']['value'], 'The description was escaped properly on the database.');

    // Create a node and check how the meta tag is displayed.
    $node = $this->drupalCreateNode();
    $this->drupalGet('node/' . $node->nid);

    // The raw output should include
    $this->assertRaw($string_encoded, 'Confirmed the node has the correctly encoded meta tag string.');
    $this->assertNoRaw($string_original, 'Confirmed the node does not have an incorrectly encoded meta tag string.');
  }

  /**
   * Tests that a metatag with single quote is not double escaped.
   */
  function testAmpersand() {
    $string_original = "blable&blu";
    $string_encoded = htmlentities($string_original, ENT_QUOTES);
    $edit = array(
      'metatags[und][description][value]' => $string_original,
    );
    $this->drupalPost('admin/config/search/metatags/config/node', $edit, 'Save');

    $result = db_select('metatag_config', 'mc')
      ->fields('mc', array('config'))
      ->condition('mc.instance', 'node')
      ->execute()
      ->fetchAssoc();

    $config = unserialize($result['config']);
    $this->assertNotEqual($string_encoded, $config['description']['value'], 'The description was escaped properly on the database.');
    $this->assertEqual($string_original, $config['description']['value'], 'The description was escaped properly on the database.');

    // Create a node and check how the meta tag is displayed.
    $node = $this->drupalCreateNode();
    $this->drupalGet('node/' . $node->nid);

    // The raw output should include
    $this->assertRaw($string_encoded, 'Confirmed the node has the correctly encoded meta tag string.');
    $this->assertNoRaw($string_original, 'Confirmed the node does not have an incorrectly encoded meta tag string.');
  }

}
