<?php
/**
 * @file
 * Primary hook implementations for Metatag:Devel.
 */

/**
 * Implements hook_node_insert().
 *
 * Integrate with Devel Generate.
 */
function metatag_devel_node_insert($node) {
  // Check to see if the node is generated by Devel Generate.
  if (isset($node->devel_generate)) {
    $metatags = array();

    // Max length of words.
    $title_length = $node->devel_generate['title_length'];

    // Pregenerate the URL.
    $url = url('<front>', array('absolute' => TRUE));

    // Types of images.
    $image_types = array('jpg' => 'jpg', 'png' => 'png', 'gif' => 'gif');

    // Generate some meta tags.
    foreach (metatag_get_info('tags') as $tag => $tag_info) {
      // Randomly skip some meta tags.
      if (array_rand(array(0, 1))) {
        continue;
      }

      // Default to ten words per tag.
      $maxlength = 10;

      // By default, just assume a simple text value.
      $type = 'text';
      if (strpos($tag, 'title') !== FALSE) {
        $maxlength = $title_length;
      }

      // Allow tags to customize the generation settings.
      if (!empty($tag_info['devel_generate'])) {
        if (!empty($tag_info['devel_generate']['type'])) {
          $type = $tag_info['devel_generate']['type'];
        }
        if (!empty($tag_info['devel_generate']['maxlength'])) {
          $maxlength = $tag_info['devel_generate']['maxlength'];
        }
      }

      // Work out how to handle possibly more complicated meta tags.
      elseif (isset($tag_info['form']) && is_array($tag_info['form'])) {
        if (isset($tag_info['form']['#type'])) {
          // Textarea fields can be longer than other tags.
          if ($tag_info['form']['#type'] == 'textarea') {
            $maxlength = 20;
          }
          // Anything with an '#options' value will have one item picked at
          // random.
          elseif (isset($tag_info['form']['#options'])) {
            $type = 'select';
          }
          // Something else, skip it for now.
          else {
            $type = 'unsupported';
          }
        }
      }

      // Simple values.
      if ($type == 'text') {
        $metatags[$tag]['value'] = devel_create_greeking($maxlength, TRUE);
      }

      // Select lists, pick a value at random.
      elseif ($type == 'select') {
        $metatags[$tag]['value'] = array_rand($tag_info['form']['#options']);
      }

      // URL values.
      elseif ($type == 'url') {
        $metatags[$tag]['value'] = $url . strtolower(str_replace(' ', '/', devel_create_greeking($maxlength, TRUE)));
      }

      // Image URL values.
      elseif ($type == 'image') {
        $filepath = strtolower(str_replace(' ', '/', devel_create_greeking($maxlength, TRUE)));
        $ext = array_rand($image_types);
        $metatags[$tag]['value'] = $url . $filepath . '.' . $ext;
      }

      // Integers, generate an integer between 0 and 999.
      elseif ($type == 'integer') {
        $metatags[$tag]['value'] = rand(0, 999);
      }
      // Floats, generate an integer between 0 and 999.
      elseif ($type == 'float') {
        $metatags[$tag]['value'] = rand(0, 999) . '.' . rand(0, 999);
      }

      // Replace spaces in keyword fields with commas.
      if (strpos($tag, 'keyword') !== FALSE) {
        $metatags[$tag]['value'] = str_replace(' ', ',', $metatags[$tag]['value']);
      }
    }

    // Save the meta tags.
    metatag_metatags_save('node', $node->nid, $node->vid, $metatags, $node->language);
  }
}
